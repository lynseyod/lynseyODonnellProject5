{"version":3,"sources":["firebase.js","Header.js","AddressCard.js","Form.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","Header","className","href","Component","AddressCard","props","firstName","lastName","contactMain","company","contactedVia","lastContacted","src","alt","Form","onSubmit","addContact","htmlFor","id","type","onChange","inputChange","App","handleClick","event","state","displayForm","setState","formSubmit","preventDefault","dbRef","database","ref","userInput","push","target","value","name","contacts","on","snapshot","val","contactsArray","key","contactObject","contactId","contactObj","onClick","this","map","contactVal","index","class","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6f79d872.chunk.js","sourcesContent":["import firebase from 'firebase/app';\r\nimport 'firebase/database'\r\n\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyBWbGE_tMKtAzZ6-naRB90pgQmIYLdiWNU\",\r\n    authDomain: \"addy-app-6b294.firebaseapp.com\",\r\n    databaseURL: \"https://addy-app-6b294.firebaseio.com\",\r\n    projectId: \"addy-app-6b294\",\r\n    storageBucket: \"addy-app-6b294.appspot.com\",\r\n    messagingSenderId: \"833732872885\",\r\n    appId: \"1:833732872885:web:500f0df2589d67ff2a8cfc\"\r\n};\r\n// Initialize Firebase\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\nexport default firebase","import React, { Component } from 'react';\r\n\r\nclass Header extends Component {\r\n  render() {\r\n    return(\r\n      <header>\r\n        <nav>\r\n          <p className=\"logo\">addy</p>\r\n          <ul>\r\n            <li><a href=\"#\">Sign in</a></li>\r\n            <li><p>/</p></li>\r\n            <li><a href=\"#\">Sign up</a></li>\r\n          </ul>\r\n        </nav>\r\n        <h1>Lynsey's addy</h1>\r\n      </header>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\n\r\nconst AddressCard = (props) => {\r\n  const {firstName, lastName, contactMain, company, contactedVia, lastContacted} = props;\r\n  return (\r\n    <div className=\"addressContainer\">\r\n      <div className=\"profilePic\">\r\n        <img src=\"http://placekitten.com/200/200\" alt=\"professional headshot\"/>\r\n      </div>\r\n      <h2>{firstName + \" \" + lastName}</h2>\r\n      <p className=\"contactInfo\">{contactMain}</p>\r\n      <p><span className=\"info\">Company: </span>{company}</p>\r\n      <p><span className=\"info\">Connected Via: </span>{contactedVia}</p>\r\n      <p><span className=\"info\">Last Contacted: </span>{lastContacted}</p>\r\n    </div>\r\n  )\r\n};\r\n\r\nexport default AddressCard;","import React from 'react';\r\n\r\nconst Form = (props) => {\r\n  return (\r\n    <form onSubmit={props.addContact}>\r\n      <label htmlFor=\"firstName\">First Name:</label>\r\n      <input id=\"firstName\" type=\"text\" onChange={props.inputChange}/>\r\n      <label htmlFor=\"lastName\">Last Name:</label>\r\n      <input id=\"lastName\" type=\"text\" onChange={props.inputChange}/>\r\n      <label htmlFor=\"contactMain\">Main Contact:</label>\r\n      <input id=\"contactMain\" type=\"text\" onChange={props.inputChange}/>\r\n      <label htmlFor=\"company\">Company:</label>\r\n      <input id=\"company\" type=\"text\" onChange={props.inputChange}/>\r\n      <label htmlFor=\"contactedVia\">Contacted via:</label>\r\n      <input id=\"contactedVia\" type=\"text\" onChange={props.inputChange}/>\r\n      <label htmlFor=\"lastContacted\">Last Contacted:</label>\r\n      <input id=\"lastContacted\" type=\"text\" onChange={props.inputChange}/>\r\n      <button type=\"submit\">Submit</button>\r\n    </form>\r\n  )\r\n}\r\n\r\nexport default Form;","import React, { Component } from 'react';\nimport firebase from './firebase.js';\n\nimport Header from './Header';\nimport AddressCard from './AddressCard';\nimport Form from './Form'\nimport './styles/styles.css';\n\nclass App extends Component {\n  constructor(){\n    super();\n    this.state = {\n      contacts: [], //empty array populated by firebase\n      firstName: \"\", //empty strings to store future input\n      lastName: \"\",\n      contactMain: \"\",\n      company: \"\",\n      contactedVia: \"\",\n      lastContacted: \"\",\n      displayForm: false,\n    }\n  }\n\n  componentDidMount() {\n    //connect app to firebase\n    const dbRef = firebase.database().ref();\n    dbRef.on('value', (snapshot) => {\n      const contacts = snapshot.val();\n      // change data from object of objects to array of objects\n      const contactsArray = [];\n      for (let key in contacts) {\n        const contactObject = {\n          contactId: key,\n          contactObj: contacts[key]\n        };\n        contactsArray.push(contactObject);\n      }\n      this.setState({\n        contacts: contactsArray\n      })\n    })\n  }\n\n  handleClick = (event) => {\n    if (this.state.displayForm) {\n      this.setState({\n        displayForm: false\n      })\n    } else {\n      this.setState({\n        displayForm: true\n      })\n    }\n  }\n\n  formSubmit = (event) => {\n    event.preventDefault();\n    const dbRef = firebase.database().ref();\n    const {firstName, lastName, contactMain, company, contactedVia, lastContacted} = this.state\n    const userInput = {};\n    userInput.firstName = firstName;\n    userInput.lastName = lastName;\n    userInput.contactMain = contactMain;\n    userInput.company = company;\n    userInput.contactedVia = contactedVia;\n    userInput.lastContacted = lastContacted;\n    dbRef.push(userInput);\n    this.setState({\n      displayForm: false\n    })\n  }\n\n  inputChange = (event) => {\n    const target = event.target;\n    const value = target.value;\n    const name = target.id;\n    this.setState({\n      [name]: value,\n    })\n  }\n\n  render() {\n    \n    return (\n      <div className=\"wrapper\">\n        <Header />\n        <main>\n          <button className=\"newAddy\" onClick={this.handleClick}><i className=\"fas fa-plus-circle\"></i></button>\n          {this.state.displayForm ? <Form addContact={this.formSubmit} inputChange={this.inputChange}/> : null}\n          <ul>\n            {this.state.contacts.map( (contactVal, index) => {\n              const {firstName, lastName, contactMain, company, contactedVia, lastContacted} = contactVal.contactObj;\n\n              return (\n                <li key={contactVal.contactId}>\n                  <AddressCard\n                    firstName={firstName}\n                    lastName={lastName}\n                    contactMain={contactMain}\n                    company={company}\n                    contactedVia={contactedVia}\n                    lastContacted={lastContacted}\n                  />\n                </li>\n              )\n            })}\n          </ul>\n        </main>\n        <footer>\n          <p><i class=\"far fa-copyright\"></i> 2019 Lynsey O'Donnell</p>\n        </footer>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}