{"version":3,"sources":["firebase.js","Header.js","AddressCard.js","AddressForm.js","Form.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","Header","className","href","Component","AddressCard","props","firstName","lastName","contactMain","company","contactedVia","lastContacted","imageSrc","buttonId","editIt","src","alt","onClick","database","ref","child","remove","event","thisThing","target","id","AddressForm","editSubmit","editChange","editId","onSubmit","htmlFor","onChange","type","value","Form","addContact","inputChange","errorMessage","App","pushUserInputs","newObject","state","resetState","setState","handleClickMainForm","displayForm","formSubmit","e","preventDefault","dbRef","userInput","push","formError","name","clickSort","toSortBy","copyOfContacts","contacts","arrayToCompare","map","contact","contactObj","sort","sortedArray","forEach","sortedThing","shouldIAddIt","contactCopy","length","sortedContact","contactId","clickTheEditButton","whatClicked","whoDis","filter","editContactForm","submitTheEditForm","whatEdited","dbRefToEdit","set","on","snapshot","val","contactsArray","key","contactObject","this","contactVal","index","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.87b82240.chunk.js","sourcesContent":["import firebase from 'firebase/app';\r\nimport 'firebase/database'\r\n\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyBWbGE_tMKtAzZ6-naRB90pgQmIYLdiWNU\",\r\n    authDomain: \"addy-app-6b294.firebaseapp.com\",\r\n    databaseURL: \"https://addy-app-6b294.firebaseio.com\",\r\n    projectId: \"addy-app-6b294\",\r\n    storageBucket: \"addy-app-6b294.appspot.com\",\r\n    messagingSenderId: \"833732872885\",\r\n    appId: \"1:833732872885:web:500f0df2589d67ff2a8cfc\"\r\n};\r\n// Initialize Firebase\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\nexport default firebase","import React, { Component } from 'react';\r\n\r\nclass Header extends Component {\r\n  render() {\r\n    return(\r\n      <header>\r\n        <nav>\r\n          <p className=\"logo\">addy</p>\r\n          <ul>\r\n            <li><a href=\"#\">Sign in</a></li>\r\n            <li><p>/</p></li>\r\n            <li><a href=\"#\">Sign up</a></li>\r\n          </ul>\r\n        </nav>\r\n        <h1>Lynsey's addy</h1>\r\n      </header>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\nimport firebase from './firebase.js';\r\n\r\nconst AddressCard = (props) => {\r\n  const {firstName, lastName, contactMain, company, contactedVia, lastContacted, imageSrc, buttonId, editIt} = props;\r\n\r\n  const handleClick = (event) => {\r\n    const thisThing = event.target.id;\r\n    editIt(thisThing);\r\n  }\r\n\r\n  const effThisBish = () => {\r\n    const dbRef = firebase.database().ref();\r\n    dbRef.child(buttonId).remove();\r\n  }\r\n\r\n  return (\r\n    <div className=\"addressContainer\">\r\n      <div className=\"profilePic\">\r\n        <img src={imageSrc} alt=\"professional headshot\"/>\r\n      </div>\r\n      <h2>{firstName + \" \" + lastName}</h2>\r\n      <p className=\"contactInfo\">{contactMain}</p>\r\n      <p><span className=\"info\">Company: </span>{company}</p>\r\n      <p><span className=\"info\">Connected Via: </span>{contactedVia}</p>\r\n      <p><span className=\"info\">Last Contacted: </span>{lastContacted}</p>\r\n      <button className=\"deleteThis\" onClick={effThisBish}><i className=\"fas fa-times-circle\"></i>Delete</button>\r\n      <button className=\"update\" onClick={handleClick} id={buttonId}><i className=\"fas fa-pencil-alt\"></i>Update info</button>\r\n    </div>\r\n  )\r\n};\r\n\r\nexport default AddressCard;","import React from 'react';\r\n\r\nconst AddressForm = (props) => {\r\n  const {firstName, lastName, contactMain, company, contactedVia, lastContacted, editSubmit, editChange, editId, imageSrc} = props;\r\n\r\n  const bufferThatSubmit = () => {\r\n    editSubmit(editId);\r\n  }\r\n\r\n  return (\r\n    <form className=\"editForm\" onSubmit={bufferThatSubmit}>\r\n      <label htmlFor=\"firstName\">First Name:</label>\r\n      <input id=\"firstName\" onChange={editChange} type=\"text\" value={firstName}/>\r\n      <label htmlFor=\"lastName\">Last Name:</label>\r\n      <input id=\"lastName\" onChange={editChange} type=\"text\" value={lastName}/>\r\n      <label htmlFor=\"contactMain\">Main Contact:</label>\r\n      <input id=\"contactMain\" onChange={editChange} type=\"text\" value={contactMain}/>\r\n      <label htmlFor=\"\">Company:</label>\r\n      <input id=\"company\" onChange={editChange} type=\"text\" value={company}/>\r\n      <label htmlFor=\"contactedVia\">Contacted Via:</label>\r\n      <input id=\"contactedVia\" onChange={editChange} type=\"text\" value={contactedVia}/>\r\n      <label htmlFor=\"lastContacted\">Last Contacted:</label>\r\n      <input id=\"lastContacted\" onChange={editChange} type=\"date\" value={lastContacted}/>\r\n      <label htmlFor=\"imageSrc\">Image Url:</label>\r\n      <input id=\"imageSrc\" onChange={editChange} type=\"text\" value={imageSrc}/>\r\n      <button type=\"submit\">Update</button>\r\n    </form>\r\n  )\r\n};\r\n\r\nexport default AddressForm;","import React from 'react';\r\n\r\nconst Form = (props) => {\r\n  const {addContact, inputChange, errorMessage} = props;\r\n  \r\n  return (\r\n    <form className=\"newContact\" onSubmit={addContact}>\r\n      <label htmlFor=\"firstName\">First Name:</label>\r\n      <input id=\"firstName\" type=\"text\" onChange={inputChange}/>\r\n      <label htmlFor=\"lastName\">Last Name:</label>\r\n      <input id=\"lastName\" type=\"text\" onChange={inputChange}/>\r\n      <label htmlFor=\"contactMain\">Main Contact:</label>\r\n      <input id=\"contactMain\" type=\"text\" onChange={inputChange}/>\r\n      <label htmlFor=\"company\">Company:</label>\r\n      <input id=\"company\" type=\"text\" onChange={inputChange}/>\r\n      <label htmlFor=\"contactedVia\">Contacted via:</label>\r\n      <input id=\"contactedVia\" type=\"text\" onChange={inputChange}/>\r\n      <label htmlFor=\"lastContacted\">Last Contacted:</label>\r\n      <input id=\"lastContacted\" type=\"date\" onChange={inputChange}/>\r\n      <label htmlFor=\"imgUrl\">(Optional)Image Url:</label>\r\n      <input id=\"imgUrl\" type=\"text\" onChange={inputChange}/>\r\n      <button type=\"submit\">Submit</button>\r\n      {errorMessage ? \r\n        <div className=\"ErrorMessage\">\r\n          <p>Please fill out all form items before submitting!</p>\r\n        </div>\r\n      : null}\r\n    </form>\r\n  )\r\n}\r\n\r\nexport default Form;","import React, { Component } from 'react';\r\nimport firebase from './firebase.js';\r\n\r\nimport Header from './Header';\r\nimport AddressCard from './AddressCard';\r\nimport AddressForm from './AddressForm';\r\nimport Form from './Form';\r\nimport './styles/styles.css';\r\nimport 'animate.css'\r\n\r\nclass App extends Component {\r\n  constructor(){\r\n    super();\r\n    this.state = {\r\n      contacts: [], //empty array populated by firebase\r\n      firstName: \"\", //empty strings to store future input\r\n      lastName: \"\",\r\n      contactMain: \"\",\r\n      company: \"\",\r\n      contactedVia: \"\",\r\n      lastContacted: \"\",\r\n      imageSrc: \"http://placekitten.com/200/200\",\r\n      displayForm: false, //toggled to display main form\r\n      formError: false, //toggled to display error message!\r\n      editContactForm: \"\", //will be filled with contactId\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    //connect app to firebase\r\n    const dbRef = firebase.database().ref();\r\n    dbRef.on('value', (snapshot) => {\r\n      const contacts = snapshot.val();\r\n      // change data from object of objects to array of objects\r\n      const contactsArray = [];\r\n      for (let key in contacts) {\r\n        const contactObject = {\r\n          contactId: key,\r\n          contactObj: contacts[key]\r\n        };\r\n        contactsArray.push(contactObject);\r\n      }\r\n      this.setState({\r\n        contacts: contactsArray\r\n      })\r\n    })\r\n  }\r\n\r\n  pushUserInputs = (newObject) => {\r\n    const {firstName, lastName, contactMain, company, contactedVia, lastContacted, imageSrc} = this.state;\r\n    newObject.firstName = firstName;\r\n    newObject.lastName = lastName;\r\n    newObject.contactMain = contactMain;\r\n    newObject.company = company;\r\n    newObject.contactedVia = contactedVia;\r\n    newObject.lastContacted = lastContacted;\r\n    newObject.imageSrc = imageSrc;\r\n  }\r\n\r\n  resetState = () => {\r\n    this.setState({\r\n      firstName: \"\",\r\n      lastName: \"\",\r\n      contactMain: \"\",\r\n      company: \"\",\r\n      contactedVia: \"\",\r\n      lastContacted: \"\",\r\n      imageSrc: \"http://placekitten.com/200/200\"\r\n    })\r\n  }\r\n\r\n  handleClickMainForm = () => {\r\n    if (this.state.displayForm) {\r\n      this.setState({\r\n        displayForm: false\r\n      })\r\n    } else {\r\n      this.setState({\r\n        displayForm: true\r\n      })\r\n    }\r\n  }\r\n\r\n  formSubmit = (e) => {\r\n    e.preventDefault();\r\n    const dbRef = firebase.database().ref();\r\n    const {firstName, lastName, contactMain, company, contactedVia, lastContacted} = this.state;\r\n    if (firstName !== \"\" && lastName !== \"\" && contactMain !== \"\" && company !== \"\" && contactedVia !== \"\" && lastContacted !== \"\") {\r\n      const userInput = {};\r\n      this.pushUserInputs(userInput);\r\n      dbRef.push(userInput);\r\n      this.resetState();\r\n      this.setState({\r\n        displayForm: false,\r\n      })\r\n    } else {\r\n      this.setState({\r\n        formError: true\r\n      })\r\n    }\r\n  }\r\n\r\n  inputChange = (e) => {\r\n    const target = e.target;\r\n    const value = target.value;\r\n    const name = target.id;\r\n    this.setState({\r\n      [name]: value,\r\n    })\r\n  }\r\n\r\n  clickSort = (e) => {\r\n    const toSortBy = e.target.id;\r\n    const copyOfContacts = [...this.state.contacts];\r\n    const arrayToSort = copyOfContacts.map((contact) => {\r\n      return contact.contactObj[toSortBy]; // sorting just the properties we're after\r\n    })\r\n    const arrayToCompare = arrayToSort.sort(); // now we have an order to test against\r\n    const sortedArray = [];\r\n\r\n    arrayToCompare.forEach((sortedThing) => {\r\n      let shouldIAddIt = true\r\n      // test it against each item in copyOfContacts\r\n      copyOfContacts.forEach((contactCopy) => {\r\n        if(contactCopy.contactObj[toSortBy] === sortedThing) {\r\n          if (sortedArray.length === 0) {\r\n            shouldIAddIt = true;\r\n          } else {\r\n            sortedArray.forEach((sortedContact) => {\r\n              if (sortedContact.contactId === contactCopy.contactId) {\r\n                shouldIAddIt = false; // so we're not duplicating when values match\r\n              }\r\n            })\r\n          }\r\n          if (shouldIAddIt) {\r\n            sortedArray.push(contactCopy);\r\n          }\r\n          this.setState({\r\n            contacts: sortedArray\r\n          })\r\n        }\r\n      })\r\n    })\r\n  }\r\n\r\n  clickTheEditButton = (whatClicked) => {\r\n    const newContacts = [...this.state.contacts]\r\n    const whoDis = newContacts.filter((contact) => {\r\n      return contact.contactId === whatClicked;\r\n    })\r\n    this.setState({\r\n      editContactForm: whatClicked, //I didn't want to destructure this since all of the \r\n      firstName: whoDis[0].contactObj.firstName, //variable names are the same.\r\n      lastName: whoDis[0].contactObj.lastName,\r\n      company: whoDis[0].contactObj.company,\r\n      contactMain: whoDis[0].contactObj.contactMain,\r\n      contactedVia: whoDis[0].contactObj.contactedVia,\r\n      lastContacted: whoDis[0].contactObj.lastContacted,\r\n      imageSrc: whoDis[0].contactObj.imageSrc\r\n    })\r\n  }\r\n\r\n  submitTheEditForm = (whatEdited) => {\r\n    const dbRefToEdit = firebase.database().ref(whatEdited);\r\n    const userInput = {};\r\n    this.pushUserInputs(userInput);\r\n    dbRefToEdit.set(userInput);\r\n    this.setState({\r\n      editContactForm: \"\",\r\n    })\r\n    this.resetState();\r\n  }\r\n  \r\n  render() {\r\n  \r\n    return (\r\n      <div className=\"wrapper\">\r\n        <Header />\r\n        <main>\r\n          <label className=\"sortLabel\">Sort by:</label>\r\n          <button className=\"sortButton\" id=\"lastContacted\" onClick={this.clickSort}>Last Contacted</button>\r\n          <button className=\"sortButton\" id=\"lastName\" onClick={this.clickSort}>Last Name</button>\r\n          <button className=\"sortButton\" id=\"company\" onClick={this.clickSort}>Company</button>\r\n          <button className=\"newAddy\" onClick={this.handleClickMainForm}>\r\n            {this.state.displayForm ? <i className=\"fas fa-times-circle\"></i> : <i className=\"fas fa-plus-circle\"></i>}\r\n          </button>\r\n          {this.state.displayForm ? \r\n            <Form \r\n              addContact={this.formSubmit}\r\n              inputChange={this.inputChange}\r\n              errorMessage={this.state.formError}\r\n            />\r\n            : null}\r\n          <ul>\r\n            {this.state.contacts.map( (contactVal, index) => {\r\n              const {firstName, lastName, contactMain, company, contactedVia, lastContacted, imageSrc} = contactVal.contactObj;\r\n\r\n              if (contactVal.contactId === this.state.editContactForm) {\r\n                return (\r\n                  <li key={contactVal.contactId}>\r\n                    <AddressForm \r\n                      firstName={this.state.firstName}\r\n                      lastName={this.state.lastName}\r\n                      contactMain={this.state.contactMain}\r\n                      company={this.state.company}\r\n                      contactedVia={this.state.contactedVia}\r\n                      lastContacted={this.state.lastContacted}\r\n                      editSubmit={this.submitTheEditForm}\r\n                      editChange={this.inputChange}\r\n                      editId={contactVal.contactId}\r\n                      imageSrc={this.state.imageSrc}\r\n                    />\r\n                  </li>\r\n                )\r\n              }\r\n\r\n              return (\r\n                <li key={contactVal.contactId}>\r\n                  <AddressCard\r\n                    firstName={firstName}\r\n                    lastName={lastName}\r\n                    contactMain={contactMain}\r\n                    company={company}\r\n                    contactedVia={contactedVia}\r\n                    lastContacted={lastContacted}\r\n                    imageSrc={imageSrc}\r\n                    buttonId={contactVal.contactId}\r\n                    editIt={this.clickTheEditButton}\r\n                  />\r\n                </li>\r\n              )\r\n            })}\r\n          </ul>\r\n        </main>\r\n        <footer>\r\n          <p><i className=\"far fa-copyright\"></i> 2019 Lynsey O'Donnell</p>\r\n        </footer>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}