{"version":3,"sources":["firebase.js","Header.js","AddressCard.js","Form.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","Header","className","href","Component","AddressCard","props","firstName","lastName","contactMain","company","contactedVia","lastContacted","src","alt","Form","onSubmit","addContact","htmlFor","id","type","onChange","inputChange","App","handleClick","event","state","displayForm","setState","formSubmit","preventDefault","dbRef","database","ref","userInput","push","target","value","name","clickSort","e","toSortBy","fuckingFakeArray","contacts","testAThing","map","contact","contactObj","sort","sortedArrayQuestionMark","forEach","sortedThing","shouldIAddIt","fuckingFakeContact","length","sortedContact","contactId","on","snapshot","val","contactsArray","key","contactObject","onClick","this","contactVal","index","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.595b81b9.chunk.js","sourcesContent":["import firebase from 'firebase/app';\r\nimport 'firebase/database'\r\n\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyBWbGE_tMKtAzZ6-naRB90pgQmIYLdiWNU\",\r\n    authDomain: \"addy-app-6b294.firebaseapp.com\",\r\n    databaseURL: \"https://addy-app-6b294.firebaseio.com\",\r\n    projectId: \"addy-app-6b294\",\r\n    storageBucket: \"addy-app-6b294.appspot.com\",\r\n    messagingSenderId: \"833732872885\",\r\n    appId: \"1:833732872885:web:500f0df2589d67ff2a8cfc\"\r\n};\r\n// Initialize Firebase\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\nexport default firebase","import React, { Component } from 'react';\r\n\r\nclass Header extends Component {\r\n  render() {\r\n    return(\r\n      <header>\r\n        <nav>\r\n          <p className=\"logo\">addy</p>\r\n          <ul>\r\n            <li><a href=\"#\">Sign in</a></li>\r\n            <li><p>/</p></li>\r\n            <li><a href=\"#\">Sign up</a></li>\r\n          </ul>\r\n        </nav>\r\n        <h1>Lynsey's addy</h1>\r\n      </header>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\n\r\nconst AddressCard = (props) => {\r\n  const {firstName, lastName, contactMain, company, contactedVia, lastContacted} = props;\r\n\r\n  return (\r\n    <div className=\"addressContainer\">\r\n      <div className=\"profilePic\">\r\n        <img src=\"http://placekitten.com/200/200\" alt=\"professional headshot\"/>\r\n      </div>\r\n      <h2>{firstName + \" \" + lastName}</h2>\r\n      <p className=\"contactInfo\">{contactMain}</p>\r\n      <p><span className=\"info\">Company: </span>{company}</p>\r\n      <p><span className=\"info\">Connected Via: </span>{contactedVia}</p>\r\n      <p><span className=\"info\">Last Contacted: </span>{lastContacted}</p>\r\n    </div>\r\n  )\r\n};\r\n\r\nexport default AddressCard;","import React from 'react';\r\n\r\nconst Form = (props) => {\r\n  return (\r\n    <form onSubmit={props.addContact}>\r\n      <label htmlFor=\"firstName\">First Name:</label>\r\n      <input id=\"firstName\" type=\"text\" onChange={props.inputChange}/>\r\n      <label htmlFor=\"lastName\">Last Name:</label>\r\n      <input id=\"lastName\" type=\"text\" onChange={props.inputChange}/>\r\n      <label htmlFor=\"contactMain\">Main Contact:</label>\r\n      <input id=\"contactMain\" type=\"text\" onChange={props.inputChange}/>\r\n      <label htmlFor=\"company\">Company:</label>\r\n      <input id=\"company\" type=\"text\" onChange={props.inputChange}/>\r\n      <label htmlFor=\"contactedVia\">Contacted via:</label>\r\n      <input id=\"contactedVia\" type=\"text\" onChange={props.inputChange}/>\r\n      <label htmlFor=\"lastContacted\">Last Contacted:</label>\r\n      <input id=\"lastContacted\" type=\"date\" onChange={props.inputChange}/>\r\n      <button type=\"submit\">Submit</button>\r\n    </form>\r\n  )\r\n}\r\n\r\nexport default Form;","import React, { Component } from 'react';\r\nimport firebase from './firebase.js';\r\n\r\nimport Header from './Header';\r\nimport AddressCard from './AddressCard';\r\nimport Form from './Form'\r\nimport './styles/styles.css';\r\n\r\nclass App extends Component {\r\n  constructor(){\r\n    super();\r\n    this.state = {\r\n      contacts: [], //empty array populated by firebase\r\n      firstName: \"\", //empty strings to store future input\r\n      lastName: \"\",\r\n      contactMain: \"\",\r\n      company: \"\",\r\n      contactedVia: \"\",\r\n      lastContacted: \"\",\r\n      displayForm: false,\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    //connect app to firebase\r\n    const dbRef = firebase.database().ref();\r\n    dbRef.on('value', (snapshot) => {\r\n      const contacts = snapshot.val();\r\n      // change data from object of objects to array of objects\r\n      const contactsArray = [];\r\n      for (let key in contacts) {\r\n        const contactObject = {\r\n          contactId: key,\r\n          contactObj: contacts[key]\r\n        };\r\n        contactsArray.push(contactObject);\r\n      }\r\n      this.setState({\r\n        contacts: contactsArray\r\n      })\r\n    })\r\n  }\r\n\r\n  handleClick = (event) => {\r\n    if (this.state.displayForm) {\r\n      this.setState({\r\n        displayForm: false\r\n      })\r\n    } else {\r\n      this.setState({\r\n        displayForm: true\r\n      })\r\n    }\r\n  }\r\n\r\n  formSubmit = (event) => {\r\n    event.preventDefault();\r\n    const dbRef = firebase.database().ref();\r\n    const {firstName, lastName, contactMain, company, contactedVia, lastContacted} = this.state\r\n    const userInput = {};\r\n    userInput.firstName = firstName;\r\n    userInput.lastName = lastName; //this needs to be capitalized\r\n    userInput.contactMain = contactMain;\r\n    userInput.company = company;\r\n    userInput.contactedVia = contactedVia;\r\n    userInput.lastContacted = lastContacted;\r\n    dbRef.push(userInput);\r\n    this.setState({\r\n      displayForm: false\r\n    })\r\n  }\r\n\r\n  inputChange = (event) => {\r\n    const target = event.target;\r\n    const value = target.value;\r\n    const name = target.id;\r\n    this.setState({\r\n      [name]: value,\r\n    })\r\n  }\r\n\r\n  clickSort = (e) => {\r\n    const toSortBy = e.target.id;\r\n    const fuckingFakeArray = [...this.state.contacts];\r\n    const arrayToSort = fuckingFakeArray.map((contact) => {\r\n      return contact.contactObj[toSortBy];\r\n    })\r\n    const testAThing = arrayToSort.sort();\r\n    const sortedArrayQuestionMark = [];\r\n\r\n    testAThing.forEach((sortedThing) => {\r\n      let shouldIAddIt = true\r\n      // test it against each item in fuckingFakeArray\r\n      fuckingFakeArray.forEach((fuckingFakeContact) => {\r\n        if(fuckingFakeContact.contactObj[toSortBy] === sortedThing) {\r\n          if (sortedArrayQuestionMark.length === 0) {\r\n            shouldIAddIt = true;\r\n          } else {\r\n            sortedArrayQuestionMark.forEach((sortedContact) => {\r\n              if (sortedContact.contactId === fuckingFakeContact.contactId) {\r\n                shouldIAddIt = false;\r\n              }\r\n            })\r\n          }\r\n          if (shouldIAddIt) {\r\n            sortedArrayQuestionMark.push(fuckingFakeContact);\r\n          }\r\n          this.setState({\r\n            contacts: sortedArrayQuestionMark\r\n          })\r\n        }\r\n      })\r\n    })\r\n  }\r\n\r\n  render() {\r\n    \r\n    return (\r\n      <div className=\"wrapper\">\r\n        <Header />\r\n        <main>\r\n          <label className=\"sortLabel\">Sort by:</label>\r\n          <button className=\"sortButton\" id=\"lastContacted\" onClick={this.clickSort}>Last Contacted</button>\r\n          <button className=\"sortButton\" id=\"lastName\" onClick={this.clickSort}>Last Name</button>\r\n          <button className=\"sortButton\" id=\"company\" onClick={this.clickSort}>Company</button>\r\n          <button className=\"newAddy\" onClick={this.handleClick}>\r\n            {this.state.displayForm ? <i className=\"fas fa-times-circle\"></i> : <i className=\"fas fa-plus-circle\"></i>}\r\n          </button>\r\n          {this.state.displayForm ? <Form addContact={this.formSubmit} inputChange={this.inputChange}/> : null}\r\n          <ul>\r\n            {this.state.contacts.map( (contactVal, index) => {\r\n              const {firstName, lastName, contactMain, company, contactedVia, lastContacted} = contactVal.contactObj;\r\n\r\n              return (\r\n                <li key={contactVal.contactId}>\r\n                  <AddressCard\r\n                    firstName={firstName}\r\n                    lastName={lastName}\r\n                    contactMain={contactMain}\r\n                    company={company}\r\n                    contactedVia={contactedVia}\r\n                    lastContacted={lastContacted}\r\n                  />\r\n                </li>\r\n              )\r\n            })}\r\n          </ul>\r\n        </main>\r\n        <footer>\r\n          <p><i className=\"far fa-copyright\"></i> 2019 Lynsey O'Donnell</p>\r\n        </footer>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}